---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'sample EC2'

Parameters:
  vpcinfoStackName:
    Description: 'Stack name of vpc, subnets etc..'
    Type: String
    Default: 'dev-vpc'

  ParentAlertStack:
    Description: parent alert stack'
    Type: String
    Default: 'dev-alerts'

  KeyName:
    Description: 'key pair of the ubuntu to establish a SSH connection '
    Type: AWS::EC2::KeyPair::KeyName
    Default: 'devops-keypair'


  MasterInstanceType:
    Description: 'The instance type of the Jenkins master.'
    Type: String
    Default: 't3.medium'

  MasterVolumeSize:
    Description: 'The root volume size, in Gibibytes (GiB). Keep in mind that Jenkins home lives on EFS.'
    Type: Number
    Default: 10
    ConstraintDescription: 'Must be in the range [8-100]'
    MinValue: 10
    MaxValue: 100

  AMIID:
    Description: Golden AMI ID
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: '/aws/service/canonical/ubuntu/server/bionic/stable/current/amd64/hvm/ebs-gp2/ami-id'

  Environment:
      Description: 'Name of the Environment'
      Type: String
      AllowedValues:
          - 'dev'
          - 'prod'
  MinSize:
      Description: MinSize
      Type: String
      Default: 1
  DesiredCapacity:
      Description: DesiredCapacity
      Type: String
      Default: 1
  MaxSize:
      Description: MaxSize
      Type: String
      Default: 1
  AppName:
      Description: Application Name
      Type: String
      Default: sample

  SGStack:
      Description: 'Stack name of jenkinsSG'
      Type: String
      Default: dev-sg
Conditions:
  HasKeyName: !Not [!Equals [!Ref KeyName, '']]
  HasAlertTopic: !Not [!Equals [!Ref ParentAlertStack, '']]
Resources:
  MasterIP:
    Type: 'AWS::IAM::InstanceProfile'
    Properties:
      Path: '/'
      Roles:
      - !Ref MasterIAMRole
  MasterIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub ${AWS::StackName}-ec2-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - 'ec2.amazonaws.com'
          Action:
          - 'sts:AssumeRole'
      Path: '/'
      ManagedPolicyArns:
          - 'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM'

      Policies:
      - PolicyName: cloudwatch
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: write
            Effect: Allow
            Action:
            - 'cloudwatch:PutMetricData'
            - 'cloudwatch:GetMetricStatistics'
            - 'cloudwatch:ListMetrics'
            Resource: '*'
      - PolicyName: ec2tags
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:DeleteTags'
            - 'ec2:CreateTags'
            - 'ec2:DescribeTags'
            Resource:
            - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/*'
            - !Sub 'arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:volume/*'
      - PolicyName: ec2-describe
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - 'ec2:DescribeInstances'
            Resource:
            - '*'


  MasterLC:
    Type: 'AWS::AutoScaling::LaunchConfiguration'
    Metadata:
      'AWS::CloudFormation::Init':
        configSets:
          default: [install]
        install:
          files:
            '/etc/cfn/cfn-hup.conf':
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                interval=1
              mode: '000400'
              owner: root
              group: root
            '/etc/cfn/hooks.d/cfn-auto-reloader.conf':
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.EC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init --verbose --stack=${AWS::StackName} --region=${AWS::Region} --resource=EC2
                runas=root
              mode: '000755'
              owner: root
              group: root
            '/home/ubuntu/ansible-collection-hardening/hardening-playbook.yaml':
              content: !Sub |
                ---
                - hosts: localhost
                  gather_facts: True
                  roles:
                    - os_hardening
                    - ssh_hardening
              mode: '000755'
              owner: root
              group: root

          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - '/etc/cfn/cfn-hup.conf'
                - '/etc/cfn/hooks.d/cfn-auto-reloader.conf'

    Properties:
      ImageId: !Ref AMIID
      IamInstanceProfile: !Ref MasterIP
      InstanceType: !Ref MasterInstanceType
      SecurityGroups:
      - {'Fn::ImportValue': !Sub '${SGStack}-EC2SG'}
      KeyName: !If [HasKeyName, !Ref KeyName, !Ref 'AWS::NoValue']
      BlockDeviceMappings:
      - DeviceName: '/dev/xvda'
        Ebs:
          VolumeSize: !Ref MasterVolumeSize
          VolumeType: gp2
          DeleteOnTermination: true
      UserData:
        'Fn::Base64': !Sub |
          #!/bin/bash -x
          apt-get update
          apt-get install unzip
          apt-get install libwww-perl libdatetime-perl
          curl https://aws-cloudwatch.s3.amazonaws.com/downloads/CloudWatchMonitoringScripts-1.2.1.zip > /home/ubuntu/CloudWatchMonitoringScripts-1.2.1.zip
          unzip /home/ubuntu/CloudWatchMonitoringScripts-1.2.1.zip -d /home/ubuntu/
          rm -rf /home/ubuntu/CloudWatchMonitoringScripts-1.2.1.zip
          chown -R ubuntu:ubuntu /home/ubuntu/aws-scripts-mon
          echo "*/5 * * * * ~/aws-scripts-mon/mon-put-instance-data.pl --mem-used-incl-cache-buff --mem-util --disk-space-util --disk-path=/ --from-cron" >> /var/spool/cron/ubuntu
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MasterLC --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource MasterASG --region ${AWS::Region}

  MasterASG:
    Type: 'AWS::AutoScaling::AutoScalingGroup'
    Properties:
      AutoScalingGroupName: !Sub '${Environment}-${AppName}-sample-asg'
      LaunchConfigurationName: !Ref MasterLC
      MinSize: !Ref MinSize
      DesiredCapacity: !Ref DesiredCapacity
      MaxSize: !Ref MaxSize
      HealthCheckGracePeriod: 2100
      HealthCheckType: EC2
      NotificationConfigurations: !If
      - HasAlertTopic
      - - NotificationTypes:
          - 'autoscaling:EC2_INSTANCE_LAUNCH_ERROR'
          - 'autoscaling:EC2_INSTANCE_TERMINATE_ERROR'
          TopicARN: {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      - []
      VPCZoneIdentifier:
      - {'Fn::ImportValue': !Sub '${vpcinfoStackName}-app1a'}
      - {'Fn::ImportValue': !Sub '${vpcinfoStackName}-app1b'}
      Tags:
      - Key: Name
        Value: 'sample-app'
        PropagateAtLaunch: true


  MasterCPUTooHighAlarm:
    Condition: HasAlertTopic
    Type: 'AWS::CloudWatch::Alarm'
    Properties:
      AlarmDescription: 'Master average CPU utilization over last 10 minutes higher than 80%'
      Namespace: 'AWS/EC2'
      MetricName: CPUUtilization
      Statistic: Average
      Period: 600
      EvaluationPeriods: 1
      ComparisonOperator: GreaterThanThreshold
      Threshold: 80
      AlarmActions:
      - {'Fn::ImportValue': !Sub '${ParentAlertStack}-TopicARN'}
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref MasterASG

Outputs:
  StackName:
    Description: 'Stack name.'
    Value: !Sub '${AWS::StackName}'